version: 2
jobs:
  lint:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: tfm_fmt
          command: |
            lint_failed="no"
            for file in $(find . -name "*tf")
            do
              lines=$(terraform fmt -write=false -list=true ${file} | wc -l | sed 's/[^0-9]//g')
              if [ ${lines} != "0" ]
              then
                echo "Please run terraform fmt ${file}"
                lint_failed="yes"
              fi
            done
            if [ ${lint_failed} != "no" ]; then exit 1; fi
  feat2dev_validate: 
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "d202"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: 
          name: select_workspace
          command: |
            terraform workspace select $WKSPC
            get_wkspc=$(terraform workspace show)
            echo $get_wkspc
            if [ $get_wkspc != $WKSPC ]; then exit 1; fi
      - run: 
          name: tflint
          command: |
            apk add --update openssl
            wget https://github.com/wata727/tflint/releases/download/v0.5.4/tflint_linux_amd64.zip
            unzip tflint_linux_amd64.zip
            mkdir -p /usr/local/tflint/bin
            export PATH=/usr/local/tflint/bin:$PATH
            install tflint /usr/local/tflint/bin
            # tflint --var-file=env/${WKSPC}.tfvars --error-with-issues
      - run:
          name: validate
          command: |
            validate_failed="no"
            TF_DIRS=$(find $(pwd) -type f -iname "*.tf*" -exec dirname '{}' \; | grep -v ".terraform" | sort | uniq | xargs echo)
            for DIR in $TF_DIRS
            do
              echo Processing $DIR
              lines=$(terraform validate -input=false -check-variables=false -no-color $DIR -var-file=env/${WKSPC}.tfvars | wc -l | sed 's/[^0-9]//g')
              if [ ${lines} != "0" ]
              then
                echo "Please run terraform validate ${file}"
                validate_failed="yes"
              fi
            done
            if [ ${validate_failed} != "no" ]; then exit 1; fi
  feat2dev_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "d202"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -out=plans/tfm.plan
  dev_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "d202"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -out=plans/tfm.plan
      - persist_to_workspace:
          root: plans
          paths:
            - tfm.plan
  dev_apply:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "d202"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - attach_workspace:
          at: plans
      - run: terraform apply -no-color -input=false -auto-approve plans/tfm.plan
  dev2uat_validate: 
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "t201"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: 
          name: select_workspace
          command: |
            terraform workspace select $WKSPC
            get_wkspc=$(terraform workspace show)
            echo $get_wkspc
            if [ $get_wkspc != $WKSPC ]; then exit 1; fi
      - run:
          name: validate
          command: |
            validate_failed="no"
            TF_DIRS=$(find $(pwd) -type f -iname "*.tf*" -exec dirname '{}' \; | grep -v ".terraform" | sort | uniq | xargs echo)
            for DIR in $TF_DIRS
            do
              echo Processing $DIR
              lines=$(terraform validate -input=false -check-variables=false -no-color $DIR -var-file=env/${WKSPC}.tfvars | wc -l | sed 's/[^0-9]//g')
              if [ ${lines} != "0" ]
              then
                echo "Please run terraform validate ${file}"
                validate_failed="yes"
              fi
            done
            if [ ${validate_failed} != "no" ]; then exit 1; fi
  dev2uat_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "t201"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -input=false -out=plans/tfm.plan
  uat_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "t201"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -input=false -out=plans/tfm.plan
      - persist_to_workspace:
          root: plans
          paths:
            - tfm.plan
  uat_apply:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "t201"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      
      - attach_workspace:
          at: plans
      - run: terraform apply -no-color -input=false -auto-approve plans/tfm.plan
  uat2prd_validate: 
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "p200"
    steps:
      - add_ssh_keys
      - checkout
      - run: 
          name: init
          command: |
            terraform init -input=false
            if [ $? != "0" ]; then exit $?; fi
      - run: 
          name: select_workspace
          command: |
            terraform workspace select $WKSPC
            get_wkspc=$(terraform workspace show)
            echo $get_wkspc
            if [ $get_wkspc != $WKSPC ]; then exit 1; fi
      - run:
          name: validate
          command: |
            validate_failed="no"
            TF_DIRS=$(find $(pwd) -type f -iname "*.tf*" -exec dirname '{}' \; | grep -v ".terraform" | sort | uniq | xargs echo)
            for DIR in $TF_DIRS
            do
              echo Processing $DIR
              lines=$(terraform validate -input=false -check-variables=false -no-color $DIR -var-file=env/${WKSPC}.tfvars | wc -l | sed 's/[^0-9]//g')
              if [ ${lines} != "0" ]
              then
                echo "Please run terraform validate ${file}"
                validate_failed="yes"
              fi
            done
            if [ ${validate_failed} != "no" ]; then exit 1; fi
  uat2prd_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "p200"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -input=false -out=plans/tfm.plan
  prd_plan:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "p200"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC
      - run: 
          name: plan
          command: |
            terraform plan -var-file=env/${WKSPC}.tfvars -var acc_id=${acc_id} -var cert_domain=${cert_domain} -no-color -input=false -out=plans/tfm.plan
      - persist_to_workspace:
          root: plans
          paths:
            - tfm.plan
  prd_apply:
    docker:
      - image: hashicorp/terraform:light
    environment: 
      - WKSPC: "p200"
    steps:
      - add_ssh_keys
      - checkout
      - run: mkdir -p plans
      - run: terraform init -input=false
      - run: terraform workspace select $WKSPC      
      - attach_workspace:
          at: plans
      - run: terraform apply -no-color -input=false -auto-approve plans/tfm.plan
workflows:
  version: 2
  feat2dev:
    jobs:
      - lint:
          filters:
            branches:  
              ignore: 
                - master
                - uat
                - dev
      - feat2dev_validate:
          requires: 
            - lint
          filters:
            branches:
              ignore: 
                - master
                - uat
                - dev
              
      - feat2dev_plan:
          requires: 
            - feat2dev_validate
          filters:
            branches:
              ignore: 
                - master
                - uat
                - dev    
      - dev_plan:
          filters: 
            branches:
              only: dev
              ignore: 
                - master
                - uat
                
      - dev_apply:
          requires: 
            - dev_plan
          filters: 
            branches:
              only: dev
              ignore: 
                - master
                - uat   
  dev2uat:
    jobs:
      - lint:
          filters:
            branches:
              only: dev
              ignore: 
                - master
                - uat
                              
      - dev2uat_validate:
          requires: 
            - lint
          filters:
            branches:
              only: dev     
              ignore: 
                - master
                - uat
                         
      - dev2uat_plan:
          requires: 
            - dev2uat_validate
          filters:
            branches:
              only: dev  
              ignore: 
                - master
                - uat
                
      - uat_plan:
          filters:
            branches:
              only: uat   
              ignore: 
                - master
                - dev         
      - uat_apply:
          requires: 
            - uat_plan
          filters:
            branches:
              only: uat
              ignore: 
                - master
                - dev  
  uat2prd:
    jobs:
    - lint:
        filters:
          branches:
            only: uat
            ignore: 
              - master
              - dev
    - uat2prd_validate:
        requires: 
          - lint
        filters:
          branches:
            only: uat
            ignore: 
              - master
              - dev
    - uat2prd_plan:
        requires: 
          - uat2prd_validate
        filters:
          branches:
            only: uat
            ignore: 
              - master
              - dev
    - prd_plan:
        filters:
          branches:
            only: master
            ignore: 
              - uat
              - dev
    - prd_hold:
        type: approval
        requires:
          - prd_plan
        filters:
          branches:
            only: master
            ignore: 
              - uat
              - dev
    - prd_apply:
        requires: 
          - prd_hold
        filters:
          branches:
            only: master
            ignore: 
              - uat
              - dev